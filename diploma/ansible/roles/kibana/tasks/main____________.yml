---
- name: Обновить кеш пакетов
  apt:
    update_cache: yes

- name: Установить необходимые пакеты
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - libffi-dev
      - python3-dev
      - gcc
    state: present

- name: Обновить pip до последней версии
  pip:
    name: pip
    state: latest

- name: Скачать containerd.io
  get_url:
    url: https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/containerd.io_1.4.3-1_amd64.deb
    dest: /tmp/containerd.io.deb
    mode: '0644'

- name: Скачать docker-ce-cli
  get_url:
    url: https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce-cli_19.03.15~3-0~ubuntu-bionic_amd64.deb
    dest: /tmp/docker-ce-cli.deb
    mode: '0644'

- name: Скачать docker-ce
  get_url:
    url: https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce_19.03.15~3-0~ubuntu-bionic_amd64.deb
    dest: /tmp/docker-ce.deb
    mode: '0644'

- name: Установить containerd.io
  apt:
    deb: /tmp/containerd.io.deb
    state: present

- name: Установить docker-ce-cli
  apt:
    deb: /tmp/docker-ce-cli.deb
    state: present

- name: Установить docker-ce
  apt:
    deb: /tmp/docker-ce.deb
    state: present

- name: Установить Docker Compose
  pip:
    name: docker-compose==1.29.2
    state: present

- name: Добавить пользователя в группу docker
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Запустить и включить Docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Создать директорию для Kibana
  file:
    path: /home/{{ ansible_user }}/kibana
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Копировать файл docker-compose.yml для Kibana
  copy:
    dest: /home/{{ ansible_user }}/kibana/docker-compose.yml
    content: |
      version: '3'
      services:
        kibana:
          container_name: kibana
          image: kibana:8.12.0
          environment:
            - ELASTICSEARCH_HOSTS=http://{{ elastic_int_ip }}:9200
            - ELASTICSEARCH_USERNAME={{ kibana_username }}
            - ELASTICSEARCH_PASSWORD={{ kibana_password }}
          ports:
            - "5601:5601"
          depends_on:
            - elasticsearch_wait
        elasticsearch_wait:
          image: busybox
          command: sh -c "until nc -z {{ elastic_int_ip }} 9200; do echo waiting for Elasticsearch; sleep 2; done"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Запустить docker-compose для Kibana
  community.docker.docker_compose:
    project_src: /home/{{ ansible_user }}/kibana
    state: present
- name: Ожидать готовности Elasticsearch (без аутентификации, для базовой проверки)
  wait_for:
    host: localhost
    port: 9200
    timeout: 60

- name: Создать пользователя kibana_system в Elasticsearch
  uri:
    url: http://localhost:9200/_security/user/kibana_system
    method: POST
    user: elastic
    password: "{{ elastic_password }}"
    body_format: json
    body:
      password: "{{ kibana_password }}"
      roles: ["kibana_system"]
    status_code: 200, 201
  register: create_user
  retries: 5
  delay: 10
  until: create_user.status in [200, 201]

- name: Проверить подключение к Elasticsearch с kibana_system
  uri:
    url: http://localhost:9200/_cluster/health
    method: GET
    user: "{{ kibana_username }}"
    password: "{{ kibana_password }}"
    status_code: 200
  register: health_check
  retries: 5
  delay: 10
  until: health_check.status == 200
